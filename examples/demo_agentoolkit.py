#!/usr/bin/env python3
"""
Comprehensive AgenToolkit Demo - Showcases AgenToolkits with convenient shortcut methods
for simplified operations, multi-toolkit integration, and platform best practices.
"""
import asyncio
import json
import random
from typing import Any, Dict, Optional, List, Union
from datetime import datetime
from pydantic import BaseModel
from pydantic_ai import Agent, RunContext

from agentool.core.injector import get_injector
from agentool.core.registry import AgenToolRegistry
from agentoolkit.storage.kv import create_storage_kv_agent
from agentoolkit.storage.fs import create_storage_fs_agent
from agentoolkit.system.templates import create_templates_agent
from agentoolkit.system.logging import create_logging_agent
from agentoolkit.system.config import create_config_agent
from agentoolkit.observability.metrics import create_metrics_agent
from agentoolkit.network.http import create_http_agent
from agentoolkit.security.crypto import create_crypto_agent

# Template definitions
_TEMPLATE_WELCOME = """Welcome {{ username }}!

Your account has been created successfully.
Email: {{ email }}
Registration Date: {{ created_at }}

Thank you for joining our platform!"""

_TEMPLATE_CONFIG_SUMMARY = """=== Current Configuration ===
Database: {{ db_host }}:{{ db_port }}/{{ db_name }}
API Version: {{ api_version }}
Rate Limit: {{ rate_limit }} requests/minute
New UI Enabled: {{ new_ui }}
Beta Access: {{ beta_access }}"""

_TEMPLATE_REPORT = """{{ header }}

Company: {{ company }}
Date: {{ date }}

=== Product Features ===
{% for feature in features %}
  - {{ feature }}
{% endfor %}

=== System Status ===
Total Requests: {{ metrics.requests }}
Average Response Time: {{ metrics.response_time }}ms
Memory Usage: {{ metrics.memory }}%

=== Configuration ===
Database: {{ config.database }}
API Version: {{ config.api_version }}

---
Generated by AgenTools Demo"""

_TEMPLATE_WORKFLOW_REPORT = """=== Workflow Execution Report ===
Workflow: {{ workflow_name }}
ID: {{ workflow_id }}
Timestamp: {{ timestamp }}

Input Data:
  Source: {{ input.source }}
  Format: {{ input.format }}
  Values: {{ input.data.values }}

Results:
  Sum: {{ output.sum }}
  Average: {{ output.avg }}
  Count: {{ output.count }}

Status: SUCCESS"""


class AgenToolkitDemo:
    """
    A comprehensive demo class that provides convenient shortcuts for AgenToolkit operations.
    
    This class demonstrates how to:
    - Create intuitive shortcuts for common operations
    - Integrate multiple AgenToolkits seamlessly
    - Build practical applications with minimal boilerplate
    """
    
    def __init__(self):
        """Initialize the demo and register all AgenToolkits."""
        # Clear registry for fresh start
        AgenToolRegistry.clear()
        get_injector().clear()
        
        # Register all the AgenToolkits
        self.agents = {
            'storage_kv': create_storage_kv_agent(),
            'storage_fs': create_storage_fs_agent(),
            'templates': create_templates_agent(templates_dir="templates"),
            'logging': create_logging_agent(),
            'config': create_config_agent(),
            'metrics': create_metrics_agent(),
            'http': create_http_agent(),
            'crypto': create_crypto_agent()
        }
        
        self.injector = get_injector()
        
    # ====================
    # SHORTCUT METHODS
    # ====================
    
    async def _log(self, message: str, level: str = "INFO", data: Optional[Dict] = None,
                   logger: str = "demo") -> None:
        """Simplified logging: await demo._log("Error", "ERROR", {"code": 500})"""
        await self.injector.run('logging', {
            "operation": "log", "level": level, "message": message,
            "data": data or {}, "logger_name": logger})
    
    async def _kvget(self, key: str, default: Any = None, namespace: str = "default") -> Any:
        """Smart KV getter with existence check: await demo._kvget("user:123", default={"name": "Unknown"})"""
        try:
            exists_result = await self.injector.run('storage_kv', {
                "operation": "exists", "key": key, "namespace": namespace})
            if hasattr(exists_result, 'data') and exists_result.data and exists_result.data.get('exists'):
                result = await self.injector.run('storage_kv', {
                    "operation": "get", "key": key, "namespace": namespace})
                return result.data.get('value', default) if hasattr(result, 'data') and result.data else default
            return default
        except:
            return default
    
    async def _kvset(self, key: str, value: Any, ttl: Optional[int] = None,
                     namespace: str = "default") -> bool:
        """KV setter: await demo._kvset("user:123", {"name": "Alice"}, ttl=3600)"""
        try:
            result = await self.injector.run('storage_kv', {
                "operation": "set", "key": key, "value": value,
                "ttl": ttl, "namespace": namespace})
            return result.data.get('stored', False) if hasattr(result, 'data') and result.data else False
        except:
            return False
    
    async def _unref(self, reference: str) -> Any:
        """Resolve !ref:type:key to actual content: await demo._unref("!ref:storage_kv:user_profile")"""
        if not reference.startswith("!ref:"): return reference
        try:
            parts = reference[5:].split(":", 1)
            if len(parts) != 2: return f"<invalid_ref:{reference}>"
            ref_type, ref_key = parts
            
            if ref_type == "storage_kv":
                value = await self._kvget(ref_key)
                return value if value is not None else f"<undefined:{reference}>"
            elif ref_type == "storage_fs":
                try:
                    result = await self.injector.run('storage_fs', {
                        "operation": "read", "path": ref_key})
                    return result.data.get('content', f"<undefined:{reference}>") if hasattr(result, 'data') and result.data else f"<undefined:{reference}>"
                except: return f"<undefined:{reference}>"
            elif ref_type == "config":
                try:
                    result = await self.injector.run('config', {
                        "operation": "get", "key": ref_key, "namespace": "app"})
                    return result.data.get('value', f"<undefined:{reference}>") if hasattr(result, 'data') and result.data else f"<undefined:{reference}>"
                except: return f"<undefined:{reference}>"
            else:
                return f"<unknown_type:{reference}>"
        except Exception as e:
            return f"<error:{reference}:{str(e)}>"
    
    async def _ref(self, ref_type: str, key: str, content: Any) -> str:
        """Store content and return reference: await demo._ref("storage_kv", "data", {"x": 1})"""
        if ref_type == "storage_kv":
            await self._kvset(key, content)
        elif ref_type == "storage_fs":
            await self.injector.run('storage_fs', {
                "operation": "write", "path": key,
                "content": json.dumps(content) if not isinstance(content, str) else content})
        elif ref_type == "config":
            await self.injector.run('config', {
                "operation": "set", "key": key, "value": content, "namespace": "app"})
        return f"!ref:{ref_type}:{key}"
    
    async def _render(self, template: str, variables: Optional[Dict] = None) -> str:
        """Render template with auto-ref resolution: await demo._render("Hi {{ name }}!", {"name": "!ref:storage_kv:user"})"""
        resolved_vars = {}  # Resolve any references in variables
        if variables:
            for key, value in variables.items():
                resolved_vars[key] = await self._unref(value) if isinstance(value, str) and value.startswith("!ref:") else value
        result = await self.injector.run('templates', {
            "operation": "exec", "template_content": template,
            "variables": resolved_vars, "strict": False})
        return result.data.get('rendered', '') if hasattr(result, 'data') and result.data else ''
    
    async def _metric(self, name: str, value: float = 1, operation: str = "increment",
                      labels: Optional[Dict] = None) -> None:
        """Track metrics: await demo._metric("api.requests") or ("response.time", 0.125, "observe")"""
        await self.injector.run('metrics', {
            "operation": operation, "name": name, "value": value, "labels": labels or {}})
    
    async def _encrypt(self, data: str, key: Optional[str] = None) -> Dict[str, str]:
        """Encrypt with auto-key generation. Returns dict with 'ciphertext', 'key', 'iv'."""
        if not key:  # Generate a new key
            key_result = await self.injector.run('crypto', {
                "operation": "generate_key", "algorithm": "aes", "key_size": 256})
            key = key_result.data.get('key') if hasattr(key_result, 'data') and key_result.data else None
            iv = key_result.data.get('iv') if hasattr(key_result, 'data') and key_result.data else None
        else:
            iv = None
        result = await self.injector.run('crypto', {
            "operation": "encrypt", "algorithm": "aes", "data": data, "key": key, "iv": iv})
        return {
            "ciphertext": result.data.get('ciphertext') if hasattr(result, 'data') and result.data else None,
            "key": key, "iv": iv}
    
    async def _http_get(self, url: str, headers: Optional[Dict] = None,
                        auth_token: Optional[str] = None) -> Any:
        """HTTP GET: await demo._http_get(url, auth_token="Bearer xyz")"""
        request = {"operation": "get", "url": url, "headers": headers or {}}
        if auth_token:
            request["auth_type"] = "bearer"
            request["auth_token"] = auth_token
        result = await self.injector.run('http', request)
        return result.get('data', {}).get('body')
    
    async def _config(self, key: str, value: Optional[Any] = None,
                      namespace: str = "app") -> Any:
        """Get/set config: await demo._config("db.host") or demo._config("db.host", "localhost")"""
        if value is None:  # Get operation
            result = await self.injector.run('config', {
                "operation": "get", "key": key, "namespace": namespace, "default": None})
            return result.data.get('value') if hasattr(result, 'data') and result.data else None
        else:  # Set operation
            await self.injector.run('config', {
                "operation": "set", "key": key, "value": value, "namespace": namespace})
            return value
    
    async def _hash(self, data: str, salt: Optional[str] = None) -> str:
        """SHA256 hash: await demo._hash("password123", salt="random_salt")"""
        result = await self.injector.run('crypto', {
            "operation": "hash", "algorithm": "sha256", "data": data, "salt": salt})
        return result.data.get('hash') if hasattr(result, 'data') and result.data else None
    
    # ====================
    # DEMO SCENARIOS
    # ====================
    
    async def demo_user_registration(self):
        """Demonstrate user registration with multiple toolkits."""
        print("\n=== User Registration Demo ===")
        await self._log("Starting user registration process")
        
        user_data = {  # Create user with hashed password
            "username": "alice_demo", "email": "alice@example.com",
            "created_at": datetime.now().isoformat(),
            "password_hash": await self._hash("SecurePassword123!", salt="demo_salt")}
        user_id = "user:alice_demo"
        await self._kvset(user_id, user_data, ttl=86400)  # Store with 24h TTL
        
        template_ref = await self._ref("storage_kv", "welcome_template", _TEMPLATE_WELCOME)
        welcome_message = await self._render(await self._unref(template_ref), user_data)
        print(welcome_message)
        
        await self._metric("users.registered")  # Track metrics
        await self._metric("registration.duration", 0.250, "observe")
        await self._log("User registration completed", "INFO", {
            "username": user_data["username"], "user_id": user_id})
        return user_id
    
    async def demo_secure_document(self):
        """Demonstrate secure document storage with encryption."""
        print("\n=== Secure Document Storage Demo ===")
        await self._log("Starting secure document storage")
        
        document = {  # Create sensitive document
            "title": "Confidential Report", "classification": "TOP SECRET",
            "content": "This is highly sensitive information that must be encrypted.",
            "author": "System Admin", "timestamp": datetime.now().isoformat()}
        encrypted = await self._encrypt(json.dumps(document, indent=2))
        doc_id = "doc:confidential:001"
        
        await self._kvset(doc_id, {  # Store encrypted document
            "encrypted_data": encrypted["ciphertext"],
            "metadata": {"title": document["title"], "classification": document["classification"],
                        "encrypted_at": datetime.now().isoformat()}})
        await self._kvset(f"{doc_id}:key", {  # Store key separately with TTL
            "key": encrypted["key"], "iv": encrypted["iv"]}, ttl=3600)
        
        print(f"Document encrypted and stored with ID: {doc_id}")
        print(f"Encryption key stored separately with 1h TTL")
        await self._metric("documents.encrypted")
        await self._log("Secure document storage completed", "INFO", {
            "doc_id": doc_id, "classification": document["classification"]})
        return doc_id
    
    async def demo_configuration_management(self):
        """Demonstrate hierarchical configuration management."""
        print("\n=== Configuration Management Demo ===")
        await self._log("Setting up application configuration")
        
        configs = {  # Define all configs
            "database.host": "localhost", "database.port": 5432, "database.name": "demo_db",
            "api.version": "v2", "api.rate_limit": 1000,
            "features.new_ui": True, "features.beta_access": False}
        for key, value in configs.items():  # Set each config
            await self._config(key, value)
            print(f"Set config: {key} = {value}")
        
        db_host, db_port = await self._config("database.host"), await self._config("database.port")
        print(f"\nDatabase connection: {db_host}:{db_port}")
        
        config_summary = await self._render(_TEMPLATE_CONFIG_SUMMARY, {  # Render summary
            "db_host": await self._config("database.host"), "db_port": await self._config("database.port"),
            "db_name": await self._config("database.name"), "api_version": await self._config("api.version"),
            "rate_limit": await self._config("api.rate_limit"), "new_ui": await self._config("features.new_ui"),
            "beta_access": await self._config("features.beta_access")})
        print(config_summary)
        await self._log("Configuration management completed")
        return configs
    
    async def demo_metrics_dashboard(self):
        """Demonstrate metrics collection and reporting."""
        print("\n=== Metrics Dashboard Demo ===")
        await self._log("Initializing metrics dashboard")
        
        # Create metric types
        for name, type_, desc in [  # Define all metrics at once
            ("app.requests.total", "counter", "Total application requests"),
            ("app.response.time", "timer", "Response time in seconds"),
            ("app.memory.usage", "gauge", "Memory usage percentage")]:
            await self.injector.run('metrics', {
                "operation": "create", "name": name, "type": type_, "description": desc})
        
        for i in range(10):  # Simulate metric collection
            await self._metric("app.requests.total")  # Increment counter
            await self._metric("app.response.time", random.uniform(0.05, 0.3), "observe")  # Response time
            await self._metric("app.memory.usage", random.uniform(40, 80), "set")  # Memory usage
        
        print("\n=== Metrics Summary ===")
        for metric_name in ["app.requests.total", "app.response.time", "app.memory.usage"]:
            result = await self.injector.run('metrics', {"operation": "get", "name": metric_name})
            data = result.data if hasattr(result, 'data') and result.data else {}
            print(f"\n{metric_name}:")
            print(f"  Type: {data.get('type')}, Value: {data.get('value')}")
            if stats := data.get('statistics'):  # Show stats if available
                print(f"  Stats: avg={stats.get('avg', 'N/A'):.3f}, "
                      f"min={stats.get('min', 'N/A'):.3f}, max={stats.get('max', 'N/A'):.3f}")
        await self._log("Metrics dashboard updated", "INFO", {"metrics_count": 3})
        return True
    
    async def demo_template_system(self):
        """Demonstrate advanced template rendering with storage integration."""
        print("\n=== Template System Demo ===")
        await self._log("Starting template system demo")
        
        # Store template data in various locations
        await self._kvset("company_name", "AgenTools Inc.")
        await self._kvset("product_features", [
            "Type-safe operations", "Deterministic behavior",
            "Easy integration", "Built-in observability"])
        await self.injector.run('storage_fs', {  # Store header in filesystem
            "operation": "write", "path": "/tmp/demo_header.html",
            "content": "<h1>Welcome to AgenTools Platform</h1>"})
        
        rendered = await self._render(_TEMPLATE_REPORT, {  # Render with multi-source data
            "header": await self._unref("!ref:storage_fs:/tmp/demo_header.html"),
            "company": await self._unref("!ref:storage_kv:company_name"),
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "features": await self._unref("!ref:storage_kv:product_features"),
            "metrics": {"requests": 1234, "response_time": 125, "memory": 65},
            "config": {"database": await self._config("database.host") or "not_configured",
                      "api_version": await self._config("api.version") or "v1"}})
        print(rendered)
        
        await self.injector.run('storage_fs', {  # Save report
            "operation": "write", "path": "/tmp/demo_report.txt", "content": rendered})
        await self._log("Template system demo completed", "INFO", {"report_saved": "/tmp/demo_report.txt"})
        return rendered
    
    async def demo_workflow_orchestration(self):
        """Demonstrate a complete workflow using multiple toolkits."""
        print("\n=== Workflow Orchestration Demo ===")
        print("This demo shows how different AgenToolkits work together")
        await self._log("Starting workflow orchestration", "INFO", {"workflow": "data_processing_pipeline"})
        
        print("\n1. Loading configuration...")  # Configure workflow
        await self._config("workflow.name", "DataProcessingPipeline")
        await self._config("workflow.timeout", 300)
        
        print("2. Validating input...")  # Validate and hash input
        input_data = {"source": "api", "format": "json", "data": {"values": [1, 2, 3, 4, 5]}}
        input_hash = await self._hash(json.dumps(input_data))
        await self._kvset("workflow:input:hash", input_hash)
        
        print("3. Processing data...")  # Process the data
        values = input_data["data"]["values"]
        processed = {"original": values, "sum": sum(values),
                    "avg": sum(values) / len(values), "count": len(values)}
        
        print("4. Storing results...")  # Store workflow results
        workflow_id = f"workflow:{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        await self._kvset(workflow_id, {
            "input": input_data, "output": processed,
            "metadata": {"workflow_name": await self._config("workflow.name"),
                        "processed_at": datetime.now().isoformat(), "input_hash": input_hash}})
        
        print("5. Generating report...")  # Generate and print report
        report = await self._render(_TEMPLATE_WORKFLOW_REPORT, {
            "workflow_name": await self._config("workflow.name"), "workflow_id": workflow_id,
            "timestamp": datetime.now().isoformat(), "input": input_data, "output": processed})
        print(report)
        
        print("6. Updating metrics...")  # Track workflow metrics
        await self._metric("workflow.executions")
        await self._metric("workflow.processing_time", 0.750, "observe")
        
        await self._log("Workflow completed successfully", "INFO", {
            "workflow_id": workflow_id, "items_processed": processed["count"]})
        print("\n✅ Workflow orchestration completed!")
        return workflow_id


async def main():
    """Run the comprehensive AgenToolkit demo."""
    print("=" * 60)
    print("AGENTOOLKIT COMPREHENSIVE DEMO")
    print("=" * 60)
    print("\nThis demo showcases the power of AgenToolkits with")
    print("convenient shortcut methods for common operations.")
    print("-" * 60)
    
    demo = AgenToolkitDemo()
    try:
        user_id = await demo.demo_user_registration()  # 1. User Registration
        await asyncio.sleep(0.5)
        doc_id = await demo.demo_secure_document()  # 2. Secure Document Storage
        await asyncio.sleep(0.5)
        configs = await demo.demo_configuration_management()  # 3. Configuration Management
        await asyncio.sleep(0.5)
        await demo.demo_metrics_dashboard()  # 4. Metrics Dashboard
        await asyncio.sleep(0.5)
        report = await demo.demo_template_system()  # 5. Template System
        await asyncio.sleep(0.5)
        workflow_id = await demo.demo_workflow_orchestration()  # 6. Workflow Orchestration
        
        print("\n" + "=" * 60)
        print("DEMO COMPLETED SUCCESSFULLY!")
        print("=" * 60)
        print("\n=== Demo Summary ===")
        print(f"✅ User registered: {user_id}")
        print(f"✅ Document encrypted: {doc_id}")
        print(f"✅ Configs set: {len(configs)} items")
        print(f"✅ Metrics tracked, Templates rendered")
        print(f"✅ Workflow executed: {workflow_id}")
        
        print("\n=== Key Shortcuts Demonstrated ===")
        shortcuts = [
            "_log: Simplified logging", "_kvget: Smart KV retrieval with defaults",
            "_kvset: Easy KV storage with TTL", "_unref: Reference resolution across storage types",
            "_ref: Create storage references", "_render: Template rendering with auto-resolution",
            "_metric: Quick metrics tracking", "_encrypt: Data encryption with auto-key generation",
            "_http_get: Simplified HTTP requests", "_config: Configuration get/set", "_hash: Quick hashing"
        ]
        for shortcut in shortcuts:
            print(f"  • {shortcut}")
        print("\n" + "=" * 60)
        print("Explore the code to see how these shortcuts simplify working with AgenToolkits!")
        print("=" * 60)
    except Exception as e:
        print(f"\n❌ Demo error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())