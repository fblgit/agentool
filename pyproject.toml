[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentool"
version = "1.0.0"
description = "Deterministic Tool Execution Framework for pydantic-ai with comprehensive toolkits"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AgenTool Framework", email = "contact@agentool.dev"}
]
maintainers = [
    {name = "AgenTool Framework", email = "contact@agentool.dev"}
]
keywords = ["ai", "agents", "tools", "pydantic", "deterministic", "llm", "toolkit"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "pydantic>=2.0",
    "pydantic-ai>=0.0.1",
    "typing-extensions>=4.0.0",
    "jinja2>=3.1.0",  # Template rendering
    "pyyaml>=6.0",  # YAML parsing for config
    "APScheduler==3.11.0",  # Scheduler
]

[project.optional-dependencies]
# Core functionality extras
storage = [
    "aiofiles>=23.0.0",
    "asyncpg>=0.27.0",
    "pgvector>=0.2.0",
]
auth = [
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
]
crypto = [
    "cryptography>=41.0.0",
]
http = [
    "httpx>=0.24.0",
]
templates = [
    "jinja2>=3.1.0",
]
rag = [
    "openai>=1.0.0",
    "tiktoken>=0.5.0",
    "numpy>=1.24.0",
]
graph = [
    "pydantic-graph>=0.1.0",
]
observability = [
    "logfire>=0.51.0",  # Observability and logging
]
ui = [
    "streamlit>=1.39.0",  # UI components with fragments support (1.33.0+)
    "pandas>=2.0.0",  # Data manipulation for UI
    "streamlit-mermaid==0.3.0",  # Mermaid diagrams
    "streamlit-elements>=0.1.0",  # Interactive draggable components
    "plotly>=5.0.0",  # Advanced charts for metrics
    "pyperclip>=1.8.0",  # Clipboard support for artifact viewer
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",  # for parallel test execution
    "dirty-equals>=0.6.0",  # for test assertions
    "inline-snapshot>=0.7.0",  # for snapshot testing
    "pytest-recording>=0.13.0",  # for VCR cassettes
]

# Linting and type checking
lint = [
    "ruff>=0.6.9",
    "mypy>=1.11.2",
    "pyright>=1.1.390",
    "codespell>=2.3.0",
]

# All optional dependencies
all = [
    "agentool[storage,auth,crypto,http,templates,rag,graph,observability,ui]",
]

[project.urls]
Homepage = "https://github.com/agentool/agentool"
Documentation = "https://agentool.readthedocs.io"
Repository = "https://github.com/agentool/agentool.git"
Changelog = "https://github.com/agentool/agentool/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/agentool/agentool/issues"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["agentool", "agentoolkit", "agents", "templates", "ui"]

[tool.setuptools.package-data]
templates = ["*.j2", "*.jinja", "prompts/*.jinja", "skeletons/*.jinja", "system/*.jinja"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "docs/.hooks"]
asyncio_mode = "auto"
xfail_strict = true
filterwarnings = [
    "error",
    # Issue with python-multipart - we don't want to bump the minimum version of starlette.
    "ignore::PendingDeprecationWarning:starlette",
    # mistralai accesses model_fields on the instance, which is deprecated in Pydantic 2.11.
    "ignore:Accessing the 'model_fields' attribute",
    # boto3
    "ignore::DeprecationWarning:botocore.*",
    "ignore::RuntimeWarning:pydantic_ai.mcp",
    # uvicorn (mcp server)
    "ignore:websockets.legacy is deprecated.*:DeprecationWarning:websockets.legacy",
    "ignore:websockets.server.WebSocketServerProtocol is deprecated:DeprecationWarning",
    # random resource warnings; I suspect these are coming from vendor SDKs when running examples..
    "ignore:unclosed <socket:ResourceWarning",
    "ignore:unclosed event loop:ResourceWarning",
    # asyncpg database connection warnings from test cleanup
    "ignore:unclosed connection.*:ResourceWarning:asyncpg.connection",
    "ignore:unclosed transport.*:ResourceWarning",
]

[tool.coverage.run]
# required to avoid warnings about files created by create_module fixture
include = [
    "src/agentool/**/*.py",
    "src/agentoolkit/**/*.py",
    "src/agents/**/*.py",
    "src/ui/**/*.py",
    "tests/**/*.py",
]
omit = [
    "tests/test_live.py",
    "tests/example_modules/*.py",
]
branch = true
# Disable include-ignored warnings as --source is enabled automatically causing a self conflict as per:
# https://github.com/pytest-dev/pytest-cov/issues/532
# https://github.com/pytest-dev/pytest-cov/issues/369
# This prevents coverage being generated by pytest-cov which has direct editor support in VS Code,
# making it super useful to check coverage while writing tests.
disable_warnings = ["include-ignored"]

[tool.coverage.paths]
# Allow CI run assets to be downloaded an replicated locally.
source = [
    ".",
    "/home/runner/work/agentool/agentool",
    "/System/Volumes/Data/home/runner/work/agentool/agentool"
]

[tool.coverage.report]
skip_covered = true
show_missing = true
ignore_errors = true
precision = 2
exclude_lines = [
    # `# pragma: no cover` is standard marker for code that's not covered, this will error if code is covered
    'pragma: no cover',
    # use `# pragma: lax no cover` if you want to ignore cases where (some of) the code is covered
    'pragma: lax no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@deprecated',
    '@typing.overload',
    '@abstractmethod',
    '\(Protocol\):$',
    'typing.assert_never',
    '$\s*assert_never\(',
    'if __name__ == .__main__.:',
    'except ImportError as _import_error:',
    '$\s*pass$',
    'assert False',
]

[tool.mypy]
python_version = "3.8"
files = "tests/typed_agent.py,tests/typed_graph.py"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pyright]
pythonVersion = "3.8"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = true
reportMissingModuleSource = false
include = [
    "src/agentool",
    "src/agentoolkit",
    "src/agents",
    "src/ui",
    "tests",
    "examples",
]
venvPath = '.'
venv = ".venv"
# see https://github.com/microsoft/pyright/issues/7771 - we don't want to error on decorated functions in tests
# which are not otherwise used
executionEnvironments = [
    { root = "tests", reportUnusedFunction = false, reportPrivateImportUsage = false },
]
exclude = [
    "node_modules",
]

[tool.ruff]
target-version = "py38"
line-length = 120
fix = true
include = [
    "src/**/*.py",
    "tests/**/*.py",
    "examples/**/*.py",
]

[tool.ruff.lint]
extend-select = [
    "Q",
    "RUF100",
    "RUF018", # https://docs.astral.sh/ruff/rules/assignment-in-assert/
    "C90",
    "UP",
    "I",
    "D",
    "TID251",
]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["agentool", "agentoolkit", "agents", "ui"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict".msg = "Use typing_extensions.TypedDict instead."

[tool.ruff.format]
# don't format python in docstrings, pytest-examples takes care of it
docstring-code-format = false
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"examples/**/*.py" = ["D101", "D103"]
"tests/**/*.py" = ["D"]

[tool.codespell]
# Ref: https://github.com/codespell-project/codespell#using-a-config-file
skip = '.git*,*.svg,*.lock,*.css,*.yaml'
check-hidden = true
# Ignore "formatting" like **L**anguage
ignore-regex = '\*\*[A-Z]\*\*[a-z]+\b'
ignore-words-list = 'asend'

[tool.inline-snapshot]
format-command = "ruff format --stdin-filename {filename}"

[tool.inline-snapshot.shortcuts]
snap-fix = ["create", "fix"]
snap = ["create"]
